"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var mocha_1 = require("@testdeck/mocha");
var chai_1 = require("chai");
var Mongoose = require("mongoose");
var _1 = require("./");
var PopulateTester = /** @class */ (function () {
    function PopulateTester() {
    }
    PopulateTester_1 = PopulateTester;
    PopulateTester.connect = function () {
        if (PopulateTester_1.conn == null) {
            PopulateTester_1.conn = Mongoose.createConnection(PopulateTester_1.CONN_STR);
        }
    };
    PopulateTester.before = function () {
        return __awaiter(this, void 0, void 0, function () {
            var userSchema, postSchema, jim, john, kate, post1, post2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userSchema = new Mongoose.Schema({
                            name: String,
                            email: String,
                            friends: [{ type: Mongoose.Schema.Types.ObjectId, ref: 'User' }]
                        });
                        postSchema = new Mongoose.Schema({
                            title: String,
                            contents: String,
                            createdBy: { type: Mongoose.Schema.Types.ObjectId, ref: 'User' },
                            likedBy: [{ type: Mongoose.Schema.Types.ObjectId, ref: 'User' }]
                        });
                        PopulateTester_1.connect();
                        PopulateTester_1.User = PopulateTester_1.conn.model('User', userSchema);
                        PopulateTester_1.Post = PopulateTester_1.conn.model('Post', postSchema);
                        jim = new PopulateTester_1.User({ name: 'Jim', email: 'jim@mail.com' });
                        return [4 /*yield*/, jim.save()];
                    case 1:
                        _a.sent();
                        john = new PopulateTester_1.User({ name: 'John', email: 'john@mail.com' });
                        return [4 /*yield*/, john.save()];
                    case 2:
                        _a.sent();
                        kate = new PopulateTester_1.User({ name: 'Kate', email: 'kate@mail.com' });
                        return [4 /*yield*/, kate.save()];
                    case 3:
                        _a.sent();
                        // add friends
                        return [4 /*yield*/, PopulateTester_1.User.findOneAndUpdate({ name: 'Jim' }, { friends: [john._id] })];
                    case 4:
                        // add friends
                        _a.sent();
                        return [4 /*yield*/, PopulateTester_1.User.findOneAndUpdate({ name: 'John' }, { friends: [kate._id] })];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, PopulateTester_1.User.findOneAndUpdate({ name: 'Kate' }, { friends: [john._id] })];
                    case 6:
                        _a.sent();
                        post1 = new PopulateTester_1.Post({
                            title: 'Post 1',
                            contents: 'Contents of Post 1',
                            createdBy: john._id,
                            likedBy: [kate._id, jim._id],
                        });
                        return [4 /*yield*/, post1.save()];
                    case 7:
                        _a.sent();
                        post2 = new PopulateTester_1.Post({
                            title: 'Post 2',
                            contents: 'Contents of Post 2',
                            createdBy: kate._id,
                            likedBy: [jim._id],
                        });
                        return [4 /*yield*/, post2.save()];
                    case 8:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PopulateTester.after = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, PopulateTester_1.Post.collection.drop()];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, PopulateTester_1.User.collection.drop()];
                    case 2:
                        _b.sent();
                        return [4 /*yield*/, ((_a = PopulateTester_1.conn) === null || _a === void 0 ? void 0 : _a.close())];
                    case 3:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PopulateTester.prototype.testDeepPopulate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var parser, qry, parsed, populate, records, _i, records_1, post;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parser = new _1.MongooseQueryParser();
                        qry = 'title&populate=createdBy:friends.name,createdBy:friends.email,createdBy.name,createdBy.email,likedBy.name';
                        parsed = parser.parse(qry);
                        chai_1.assert.exists(parsed.filter);
                        populate = parsed.populate;
                        chai_1.assert.exists(populate);
                        chai_1.assert.isTrue(populate.length == 2);
                        return [4 /*yield*/, PopulateTester_1.Post.find(parsed.filter).populate(populate).lean()];
                    case 1:
                        records = _a.sent();
                        for (_i = 0, records_1 = records; _i < records_1.length; _i++) {
                            post = records_1[_i];
                            chai_1.assert.exists(post.createdBy.name);
                            chai_1.assert.exists(post.createdBy.friends.find(function (f) { return f.name && f.email; }));
                            chai_1.assert.exists(post.likedBy);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    PopulateTester.prototype.testPopulate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var parser, qry, parsed, populate, _i, populate_1, p, records, _a, records_2, post;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        parser = new _1.MongooseQueryParser();
                        qry = 'title&populate=createdBy.name,createdBy.email,likedBy';
                        parsed = parser.parse(qry);
                        populate = parsed.populate;
                        chai_1.assert.exists(populate);
                        chai_1.assert.isTrue(populate.length == 2);
                        for (_i = 0, populate_1 = populate; _i < populate_1.length; _i++) {
                            p = populate_1[_i];
                            chai_1.assert.isTrue(['createdBy', 'likedBy'].includes(p.path));
                            if (p.select) {
                                chai_1.assert.isTrue(p.select == 'name email');
                            }
                        }
                        chai_1.assert.exists(parsed.filter);
                        return [4 /*yield*/, PopulateTester_1.Post.find(parsed.filter).populate(populate).lean()];
                    case 1:
                        records = _b.sent();
                        for (_a = 0, records_2 = records; _a < records_2.length; _a++) {
                            post = records_2[_a];
                            chai_1.assert.exists(post.createdBy.name);
                            chai_1.assert.exists(post.likedBy);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    var PopulateTester_1;
    PopulateTester.CONN_STR = 'mongodb://localhost:27017/test';
    __decorate([
        mocha_1.test('should query with deep populate'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], PopulateTester.prototype, "testDeepPopulate", null);
    __decorate([
        mocha_1.test('should query with populate'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], PopulateTester.prototype, "testPopulate", null);
    PopulateTester = PopulateTester_1 = __decorate([
        mocha_1.suite('test-populate.spec')
    ], PopulateTester);
    return PopulateTester;
}());
//# sourceMappingURL=test-populate.spec.js.map